tArgs = {...}
versionNum = os.versionBuild()
function downloadUpdate()
function download(url, file, dir)
  local content = http.get(url).readAll()
  if not content then
    print("Could not connect to servers...")
  else
 --print("creating dir: "..dir)
  fs.makeDir(dir)
 -- shell.setDir(dir)
--    print("Filename : \""..file.."\"")
 -- print("Directory : \""..dir.."\"")
sleep(5)
 -- print("Writing : \""..content.."\"")
  handler=io.open(dir..file,"w")
	handler:write(content)
	handler:close()
	end
end
local function getRunningPath()
  local runningProgram = shell.getRunningProgram()
  local programName = fs.getName(runningProgram)
  return runningProgram:sub( 1, #runningProgram - #programName )
end
oldpath = getRunningPath()
write("\n\nSelcting needed Updates...\n")
if onlineVers == localVers then









local data = http.get("http://huskyos.schwarzis.net/huskyos_serverupdate.php?update_to="..localVers)
if not data then
	print("Couldn't connect to the HuskyOS servers!")
error()
end
data = data.readAll()
local Table = textutils.unserialize(data)
print("Done!")
write("\n\nChecking file-list for errors...")
sleep(1)
for i=1,#Table do
if Table.path[i] == nil or Table.filename[i] == nil then
write("Error found!")
print("\nDetected an error in file-list: Row "..i)
print("Can't continue download!")
print("Please try again later...\n")
error()
end
end
print("Done!")
print("\nTotal files to download: "..#Table.."\n")
a = 100 / #Table
for i=1,#Table do
loading = (i-1) * a
	print("Downloading file	".. i .." of ".. #Table.." : "..string.format("%.f", loading).."% completed")
	--print("downloading "..Table[i])
-- print("Saving in: "..Table.path[i] )
 download(Table[i], Table.filename[i], Table.path[i])
 
 
end
print("100% complete. Download finished!\n")
sec = 10
if needRestart == true then
print("Update will be resumed after restart.")
config.load("/","HuskyOS.conf")
config.writeVal("resumeUpdate","true")
config.save()
end
while true do
print("HuskyOS will restart in: "..sec.." Seconds.")
sleep(1)
sec = sec - 1
if sec == 0 then
os.reboot()
end
end













else
toUpdateNum = 0
newLocal = localVers * 10
newOnline = onlineVers * 10
repeat
toUpdateNum = toUpdateNum + 1
newLocal = newLocal + 1
until newLocal == newOnline
if toUpdateNum > 1 then
needRestart = true
print("You are "..toUpdateNum.." updates late!")
print("HuskyOS will now update to the next version ("..nowneededvers..").\n")
end
write("\nDownloading file-list from HuskyOS server...")
sleep(2)
if onlineVers > localVers then
download = nowneededvers
else
download = localVers
end
local data = http.get("http://huskyos.schwarzis.net/huskyos_serverupdate.php?update_to="..download)
if not data then
	print("Couldn't connect to the HuskyOS servers!")
error()
end
data = data.readAll()
local Table = textutils.unserialize(data)
write("Done!")
write("\n\nChecking file-list for errors...")
sleep(1)
for i=1,#Table do
if Table.path[i] == nil or Table.filename[i] == nil then
write("Error found!")
print("\n\nDetected an error in file-list: Row "..i)
print("Can't continue download!")
print("Please try again later...\n")
error()
end
end
write("Done!")
print("\n\nTotal files to download: "..#Table.."\n")
a = 100 / #Table
for i=1,#Table do
loading = (i-1) * a
	print("Downloading file	".. i .." of ".. #Table.." : "..string.format("%.f", loading).."% completed")
	--print("downloading "..Table[i])
-- print("Saving in: "..Table.path[i] )
 download(Table[i], Table.filename[i], Table.path[i])
 
 
end
print("100% complete. Download finished!\n")
sec = 10
if needRestart == true then
print("Update will be resumed after restart.")
config.load("/","HuskyOS.conf")
config.writeVal("resumeUpdate","true")
config.save()
end
while true do
print("HuskyOS will restart in: "..sec.." Seconds.")
sleep(1)
sec = sec - 1
if sec == 0 then
os.reboot()
end
end
end
end


function searchUpdate()  
  local response = http.get(
                    "http://huskyos.schwarzis.net/checkversion.php?edition="..os.edition().."&n=y"
                    )
                   
            if response then
                   print("connected!")
				   print("now checking versions...")
				  sleep(3)
                    local sResponse = response.readAll()
                    response.close()
					local Table = textutils.unserialize(sResponse)
					onlineVers = tonumber(Table[1])
					onlineBuild = tonumber(Table.build[1])
					localBuild = os.versionBuild()
                    localVers = os.versionNum()
					if onlineBuild > localBuild then
					if onlineVers > localVers then
					nowneededvers = localVers + 0.1
					end
					print("update available!\n")
					print(nowneededvers)
					print("***************************************************")
					print("*    local version      |     remote version      *")
					print("*-------------------------------------------------*")
					write("*  HuskyOS Server "..localVers)
										local text = "|"
					local x,y = term.getSize()
					local x2,y2 = term.getCursorPos()
					term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), y2)
					write(text)
					write("   HuskyOS Server "..onlineVers.."    *")
					write("*     BUILD "..localBuild)
					local x,y = term.getSize()
					local x2,y2 = term.getCursorPos()
					term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), y2)
					write(text)
					write("      BUILD "..onlineBuild.."       *")
					print("***************************************************")
					print("")
					print("Changes:")
					for i=1, #Table.changes do
					print(Table.changes[i])
					end
					print("")
					write("Would you like to update? [Y|N]:")
					yesorno = read()
					if yesorno == "Y" then
					
					downloadUpdate()
					
					elseif yesorno == "y" then
					downloadUpdate()
					
					else
					print("update was cancelled by user")
					
					end
					
				else
					print("No update available right now...")
					end
                   
            else
                    print( "Got no response from the update-server!" )
					print("please try again later...")
            end
end
if tArgs[1] == "force" then
print("\n       -------# HuskyOS updater #-------")
print("Checking license...")
sleep(2)
local file = io.open("/.sys/etc/.hidden/PkfHosSv1.1", "r") -- open file in read
key = file:read()
if key == nil or config.readVal("activated") == false then
activated = false
else
activated = true
end
if activated == true then
print("\nHuskyOS will now force updates!\n")
downloadUpdate()
sleep(1)
searchUpdate()
else
print("\nHuskyOS is not activated! Cancelling update...\n")
end
else
print("\n       -------# HuskyOS updater #-------")
print("Checking license...")
sleep(2)
local file = io.open("/.sys/etc/.hidden/PkfHosSv1.1", "r") -- open file in read
key = file:read()
if key == nil or config.readVal("activated") == false then
activated = false
else
activated = true
end
if activated == true then
print("\nHuskyOS will now check for available updates.")
print("connecting to the HuskyOS-Servers...")
sleep(1)
searchUpdate()
else
print("\nHuskyOS is not activated! Cancelling update...\n")
end
end